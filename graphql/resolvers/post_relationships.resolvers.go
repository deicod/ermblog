package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"

	graphql1 "github.com/deicod/ermblog/graphql"
	"github.com/deicod/ermblog/graphql/dataloaders"
	"github.com/deicod/ermblog/orm/gen"
)

// Author is the resolver for the author field.
func (r *postResolver) Author(ctx context.Context, obj *graphql1.Post) (*graphql1.User, error) {
	if obj == nil {
		return nil, nil
	}

	authorID := obj.AuthorID
	if authorID == "" {
		return nil, nil
	}

	if loaders := dataloaders.FromContext(ctx); loaders != nil {
		if loader := loaders.User(); loader != nil {
			user, err := loader.Load(ctx, authorID)
			if err != nil {
				return nil, err
			}
			return toGraphQLUser(user), nil
		}
	}

	if r.ORM == nil {
		return nil, nil
	}

	user, err := r.ORM.Users().ByID(ctx, authorID)
	if err != nil {
		return nil, err
	}
	return toGraphQLUser(user), nil
}

// FeaturedMedia is the resolver for the featuredMedia field.
func (r *postResolver) FeaturedMedia(ctx context.Context, obj *graphql1.Post) (*graphql1.Media, error) {
	if obj == nil {
		return nil, nil
	}

	if obj.FeaturedMediaID == nil || *obj.FeaturedMediaID == "" {
		return nil, nil
	}

	mediaID := *obj.FeaturedMediaID
	if loaders := dataloaders.FromContext(ctx); loaders != nil {
		if loader := loaders.Media(); loader != nil {
			media, err := loader.Load(ctx, mediaID)
			if err != nil {
				return nil, err
			}
			return toGraphQLMedia(media), nil
		}
	}

	if r.ORM == nil {
		return nil, nil
	}

	media, err := r.ORM.Medias().ByID(ctx, mediaID)
	if err != nil {
		return nil, err
	}
	return toGraphQLMedia(media), nil
}

// Categories is the resolver for the categories field.
func (r *postResolver) Categories(ctx context.Context, obj *graphql1.Post) ([]*graphql1.Category, error) {
	if obj == nil {
		return []*graphql1.Category{}, nil
	}

	nativeID, err := decodePostID(obj.ID)
	if err != nil {
		return nil, err
	}
	if nativeID == "" {
		return []*graphql1.Category{}, nil
	}

	if loaders := dataloaders.FromContext(ctx); loaders != nil {
		if loader := loaders.PostCategories(); loader != nil {
			categories, err := loader.Load(ctx, nativeID)
			if err != nil {
				return nil, err
			}
			return toGraphQLCategories(categories), nil
		}
	}

	if r.ORM == nil {
		return []*graphql1.Category{}, nil
	}

	post := &gen.Post{ID: nativeID}
	if err := r.ORM.Posts().LoadCategories(ctx, post); err != nil {
		return nil, err
	}
	return toGraphQLCategories(postCategories(post)), nil
}

// Tags is the resolver for the tags field.
func (r *postResolver) Tags(ctx context.Context, obj *graphql1.Post) ([]*graphql1.Tag, error) {
	if obj == nil {
		return []*graphql1.Tag{}, nil
	}

	nativeID, err := decodePostID(obj.ID)
	if err != nil {
		return nil, err
	}
	if nativeID == "" {
		return []*graphql1.Tag{}, nil
	}

	if loaders := dataloaders.FromContext(ctx); loaders != nil {
		if loader := loaders.PostTags(); loader != nil {
			tags, err := loader.Load(ctx, nativeID)
			if err != nil {
				return nil, err
			}
			return toGraphQLTags(tags), nil
		}
	}

	if r.ORM == nil {
		return []*graphql1.Tag{}, nil
	}

	post := &gen.Post{ID: nativeID}
	if err := r.ORM.Posts().LoadTags(ctx, post); err != nil {
		return nil, err
	}
	return toGraphQLTags(postTags(post)), nil
}

type postResolver struct{ *Resolver }

func (r *Resolver) Post() graphql1.PostResolver { return &postResolver{r} }

func toGraphQLCategories(records []*gen.Category) []*graphql1.Category {
	if len(records) == 0 {
		return []*graphql1.Category{}
	}
	converted := make([]*graphql1.Category, 0, len(records))
	for _, record := range records {
		if record != nil {
			converted = append(converted, toGraphQLCategory(record))
		}
	}
	if converted == nil {
		return []*graphql1.Category{}
	}
	return converted
}

func toGraphQLTags(records []*gen.Tag) []*graphql1.Tag {
	if len(records) == 0 {
		return []*graphql1.Tag{}
	}
	converted := make([]*graphql1.Tag, 0, len(records))
	for _, record := range records {
		if record != nil {
			converted = append(converted, toGraphQLTag(record))
		}
	}
	if converted == nil {
		return []*graphql1.Tag{}
	}
	return converted
}

func postCategories(post *gen.Post) []*gen.Category {
	if post == nil || post.Edges == nil || post.Edges.Categories == nil {
		return []*gen.Category{}
	}
	return post.Edges.Categories
}

func postTags(post *gen.Post) []*gen.Tag {
	if post == nil || post.Edges == nil || post.Edges.Tags == nil {
		return []*gen.Tag{}
	}
	return post.Edges.Tags
}

func (r *Resolver) normalizeCategoryIDs(ctx context.Context, ids []string) ([]string, error) {
	if len(ids) == 0 {
		return []string{}, nil
	}
	client := r.categoryClient()
	if client == nil {
		return nil, fmt.Errorf("category provider is not configured")
	}
	seen := make(map[string]struct{}, len(ids))
	normalized := make([]string, 0, len(ids))
	for _, encoded := range ids {
		nativeID, err := decodeCategoryID(encoded)
		if err != nil {
			return nil, err
		}
		if _, ok := seen[nativeID]; ok {
			continue
		}
		record, err := client.ByID(ctx, nativeID)
		if err != nil {
			return nil, err
		}
		if record == nil {
			return nil, fmt.Errorf("category not found")
		}
		seen[nativeID] = struct{}{}
		normalized = append(normalized, nativeID)
		r.primeCategory(ctx, record)
	}
	return normalized, nil
}

func (r *Resolver) normalizeTagIDs(ctx context.Context, ids []string) ([]string, error) {
	if len(ids) == 0 {
		return []string{}, nil
	}
	client := r.tagClient()
	if client == nil {
		return nil, fmt.Errorf("tag provider is not configured")
	}
	seen := make(map[string]struct{}, len(ids))
	normalized := make([]string, 0, len(ids))
	for _, encoded := range ids {
		nativeID, err := decodeTagID(encoded)
		if err != nil {
			return nil, err
		}
		if _, ok := seen[nativeID]; ok {
			continue
		}
		record, err := client.ByID(ctx, nativeID)
		if err != nil {
			return nil, err
		}
		if record == nil {
			return nil, fmt.Errorf("tag not found")
		}
		seen[nativeID] = struct{}{}
		normalized = append(normalized, nativeID)
		r.primeTag(ctx, record)
	}
	return normalized, nil
}

func (r *Resolver) assignPostTaxonomies(ctx context.Context, postID string, categoryIDs []string, hasCategoryIDs bool, tagIDs []string, hasTagIDs bool) error {
	if !hasCategoryIDs && !hasTagIDs {
		return nil
	}
	service := r.postTaxonomyService()
	if service == nil {
		return fmt.Errorf("post taxonomy service is not configured")
	}
	if hasCategoryIDs {
		if err := service.ReplacePostCategories(ctx, postID, categoryIDs); err != nil {
			return err
		}
	}
	if hasTagIDs {
		if err := service.ReplacePostTags(ctx, postID, tagIDs); err != nil {
			return err
		}
	}
	return nil
}
