// Code generated by erm. DO NOT EDIT.
package dataloaders

import (
	"context"
	"github.com/deicod/ermblog/observability/metrics"
	"github.com/deicod/ermblog/orm/gen"
)

func configureEntityLoaders(loaders *Loaders, orm *gen.Client, collector metrics.Collector) {
	if loaders == nil || orm == nil {
		return
	}
	loaders.register("Category", newEntityLoader[string, *gen.Category]("categories", collector, func(ctx context.Context, keys []string) (map[string]*gen.Category, error) {
		results := make(map[string]*gen.Category, len(keys))
		for _, key := range keys {
			record, err := orm.Categories().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("Comment", newEntityLoader[string, *gen.Comment]("comments", collector, func(ctx context.Context, keys []string) (map[string]*gen.Comment, error) {
		results := make(map[string]*gen.Comment, len(keys))
		for _, key := range keys {
			record, err := orm.Comments().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("Media", newEntityLoader[string, *gen.Media]("medias", collector, func(ctx context.Context, keys []string) (map[string]*gen.Media, error) {
		results := make(map[string]*gen.Media, len(keys))
		for _, key := range keys {
			record, err := orm.Medias().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("Option", newEntityLoader[string, *gen.Option]("options", collector, func(ctx context.Context, keys []string) (map[string]*gen.Option, error) {
		results := make(map[string]*gen.Option, len(keys))
		for _, key := range keys {
			record, err := orm.Options().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("Post", newEntityLoader[string, *gen.Post]("posts", collector, func(ctx context.Context, keys []string) (map[string]*gen.Post, error) {
		results := make(map[string]*gen.Post, len(keys))
		for _, key := range keys {
			record, err := orm.Posts().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("Role", newEntityLoader[string, *gen.Role]("roles", collector, func(ctx context.Context, keys []string) (map[string]*gen.Role, error) {
		results := make(map[string]*gen.Role, len(keys))
		for _, key := range keys {
			record, err := orm.Roles().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("Tag", newEntityLoader[string, *gen.Tag]("tags", collector, func(ctx context.Context, keys []string) (map[string]*gen.Tag, error) {
		results := make(map[string]*gen.Tag, len(keys))
		for _, key := range keys {
			record, err := orm.Tags().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
	loaders.register("User", newEntityLoader[string, *gen.User]("users", collector, func(ctx context.Context, keys []string) (map[string]*gen.User, error) {
		results := make(map[string]*gen.User, len(keys))
		for _, key := range keys {
			record, err := orm.Users().ByID(ctx, key)
			if err != nil {
				return nil, err
			}
			if record != nil {
				results[key] = record
			}
		}
		return results, nil
	}))
}

func (l *Loaders) Category() *EntityLoader[string, *gen.Category] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Category").(*EntityLoader[string, *gen.Category]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) Comment() *EntityLoader[string, *gen.Comment] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Comment").(*EntityLoader[string, *gen.Comment]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) Media() *EntityLoader[string, *gen.Media] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Media").(*EntityLoader[string, *gen.Media]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) Option() *EntityLoader[string, *gen.Option] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Option").(*EntityLoader[string, *gen.Option]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) Post() *EntityLoader[string, *gen.Post] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Post").(*EntityLoader[string, *gen.Post]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) Role() *EntityLoader[string, *gen.Role] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Role").(*EntityLoader[string, *gen.Role]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) Tag() *EntityLoader[string, *gen.Tag] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("Tag").(*EntityLoader[string, *gen.Tag]); ok {
		return loader
	}
	return nil
}

func (l *Loaders) User() *EntityLoader[string, *gen.User] {
	if l == nil {
		return nil
	}
	if loader, ok := l.get("User").(*EntityLoader[string, *gen.User]); ok {
		return loader
	}
	return nil
}
