// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type Category struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description *string   `json:"description,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

func (Category) IsNode()            {}
func (this Category) GetID() string { return this.ID }

type CategoryConnection struct {
	Edges      []*CategoryEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type CategoryEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Category `json:"node,omitempty"`
}

type Comment struct {
	ID        string        `json:"id"`
	PostID    string        `json:"postID"`
	AuthorID  string        `json:"authorID"`
	ParentID  *string       `json:"parentID,omitempty"`
	Body      string        `json:"body"`
	Status    CommentStatus `json:"status"`
	CreatedAt time.Time     `json:"createdAt"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

func (Comment) IsNode()            {}
func (this Comment) GetID() string { return this.ID }

type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type CommentEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Comment `json:"node,omitempty"`
}

type CreateCategoryInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               *string    `json:"id,omitempty"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type CreateCategoryPayload struct {
	ClientMutationID *string   `json:"clientMutationId,omitempty"`
	Category         *Category `json:"category,omitempty"`
}

type CreateCommentInput struct {
	ClientMutationID *string        `json:"clientMutationId,omitempty"`
	ID               *string        `json:"id,omitempty"`
	PostID           *string        `json:"postID,omitempty"`
	AuthorID         *string        `json:"authorID,omitempty"`
	ParentID         *string        `json:"parentID,omitempty"`
	Body             *string        `json:"body,omitempty"`
	Status           *CommentStatus `json:"status,omitempty"`
	CreatedAt        *time.Time     `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
}

type CreateCommentPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Comment          *Comment `json:"comment,omitempty"`
}

type CreatePostInput struct {
	ClientMutationID *string     `json:"clientMutationId,omitempty"`
	ID               *string     `json:"id,omitempty"`
	AuthorID         *string     `json:"authorID,omitempty"`
	CategoryID       *string     `json:"categoryID,omitempty"`
	Title            *string     `json:"title,omitempty"`
	Slug             *string     `json:"slug,omitempty"`
	Excerpt          *string     `json:"excerpt,omitempty"`
	Body             *string     `json:"body,omitempty"`
	Status           *PostStatus `json:"status,omitempty"`
	IsFeatured       *bool       `json:"isFeatured,omitempty"`
	PublishedAt      *time.Time  `json:"publishedAt,omitempty"`
	CreatedAt        *time.Time  `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time  `json:"updatedAt,omitempty"`
}

type CreatePostPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Post             *Post   `json:"post,omitempty"`
}

type CreateTagInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               *string    `json:"id,omitempty"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	Color            *string    `json:"color,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type CreateTagPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Tag              *Tag    `json:"tag,omitempty"`
}

type CreateUserInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               *string    `json:"id,omitempty"`
	Username         *string    `json:"username,omitempty"`
	Email            *string    `json:"email,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	DisplayName      *string    `json:"displayName,omitempty"`
	Bio              *string    `json:"bio,omitempty"`
	AvatarURL        *string    `json:"avatarURL,omitempty"`
	Role             *UserRole  `json:"role,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type CreateUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user,omitempty"`
}

type DeleteCategoryInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteCategoryPayload struct {
	ClientMutationID  *string `json:"clientMutationId,omitempty"`
	DeletedCategoryID string  `json:"deletedCategoryID"`
}

type DeleteCommentInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteCommentPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedCommentID string  `json:"deletedCommentID"`
}

type DeletePostInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeletePostPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedPostID    string  `json:"deletedPostID"`
}

type DeleteTagInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteTagPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedTagID     string  `json:"deletedTagID"`
}

type DeleteUserInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedUserID    string  `json:"deletedUserID"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Post struct {
	ID          string     `json:"id"`
	AuthorID    string     `json:"authorID"`
	CategoryID  *string    `json:"categoryID,omitempty"`
	Title       string     `json:"title"`
	Slug        string     `json:"slug"`
	Excerpt     *string    `json:"excerpt,omitempty"`
	Body        *string    `json:"body,omitempty"`
	Status      PostStatus `json:"status"`
	IsFeatured  bool       `json:"isFeatured"`
	PublishedAt *time.Time `json:"publishedAt,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
}

func (Post) IsNode()            {}
func (this Post) GetID() string { return this.ID }

type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node,omitempty"`
}

type Query struct {
}

type Subscription struct {
}

type Tag struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description *string   `json:"description,omitempty"`
	Color       *string   `json:"color,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

func (Tag) IsNode()            {}
func (this Tag) GetID() string { return this.ID }

type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

type TagEdge struct {
	Cursor string `json:"cursor"`
	Node   *Tag   `json:"node,omitempty"`
}

type UpdateCategoryInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               string     `json:"id"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type UpdateCategoryPayload struct {
	ClientMutationID *string   `json:"clientMutationId,omitempty"`
	Category         *Category `json:"category,omitempty"`
}

type UpdateCommentInput struct {
	ClientMutationID *string        `json:"clientMutationId,omitempty"`
	ID               string         `json:"id"`
	PostID           *string        `json:"postID,omitempty"`
	AuthorID         *string        `json:"authorID,omitempty"`
	ParentID         *string        `json:"parentID,omitempty"`
	Body             *string        `json:"body,omitempty"`
	Status           *CommentStatus `json:"status,omitempty"`
	CreatedAt        *time.Time     `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
}

type UpdateCommentPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Comment          *Comment `json:"comment,omitempty"`
}

type UpdatePostInput struct {
	ClientMutationID *string     `json:"clientMutationId,omitempty"`
	ID               string      `json:"id"`
	AuthorID         *string     `json:"authorID,omitempty"`
	CategoryID       *string     `json:"categoryID,omitempty"`
	Title            *string     `json:"title,omitempty"`
	Slug             *string     `json:"slug,omitempty"`
	Excerpt          *string     `json:"excerpt,omitempty"`
	Body             *string     `json:"body,omitempty"`
	Status           *PostStatus `json:"status,omitempty"`
	IsFeatured       *bool       `json:"isFeatured,omitempty"`
	PublishedAt      *time.Time  `json:"publishedAt,omitempty"`
	CreatedAt        *time.Time  `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time  `json:"updatedAt,omitempty"`
}

type UpdatePostPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Post             *Post   `json:"post,omitempty"`
}

type UpdateTagInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               string     `json:"id"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	Color            *string    `json:"color,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type UpdateTagPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Tag              *Tag    `json:"tag,omitempty"`
}

type UpdateUserInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               string     `json:"id"`
	Username         *string    `json:"username,omitempty"`
	Email            *string    `json:"email,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	DisplayName      *string    `json:"displayName,omitempty"`
	Bio              *string    `json:"bio,omitempty"`
	AvatarURL        *string    `json:"avatarURL,omitempty"`
	Role             *UserRole  `json:"role,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type UpdateUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user,omitempty"`
}

type User struct {
	ID          string    `json:"id"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	Slug        string    `json:"slug"`
	DisplayName *string   `json:"displayName,omitempty"`
	Bio         *string   `json:"bio,omitempty"`
	AvatarURL   *string   `json:"avatarURL,omitempty"`
	Role        UserRole  `json:"role"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

func (User) IsNode()            {}
func (this User) GetID() string { return this.ID }

type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node,omitempty"`
}

type CommentStatus string

const (
	CommentStatusVisible CommentStatus = "VISIBLE"
	CommentStatusPending CommentStatus = "PENDING"
	CommentStatusHidden  CommentStatus = "HIDDEN"
)

var AllCommentStatus = []CommentStatus{
	CommentStatusVisible,
	CommentStatusPending,
	CommentStatusHidden,
}

func (e CommentStatus) IsValid() bool {
	switch e {
	case CommentStatusVisible, CommentStatusPending, CommentStatusHidden:
		return true
	}
	return false
}

func (e CommentStatus) String() string {
	return string(e)
}

func (e *CommentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentStatus", str)
	}
	return nil
}

func (e CommentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CommentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CommentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PostStatus string

const (
	PostStatusDraft     PostStatus = "DRAFT"
	PostStatusPublished PostStatus = "PUBLISHED"
	PostStatusArchived  PostStatus = "ARCHIVED"
)

var AllPostStatus = []PostStatus{
	PostStatusDraft,
	PostStatusPublished,
	PostStatusArchived,
}

func (e PostStatus) IsValid() bool {
	switch e {
	case PostStatusDraft, PostStatusPublished, PostStatusArchived:
		return true
	}
	return false
}

func (e PostStatus) String() string {
	return string(e)
}

func (e *PostStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostStatus", str)
	}
	return nil
}

func (e PostStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PostStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PostStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserRole string

const (
	UserRoleReader UserRole = "READER"
	UserRoleAuthor UserRole = "AUTHOR"
	UserRoleEditor UserRole = "EDITOR"
	UserRoleAdmin  UserRole = "ADMIN"
)

var AllUserRole = []UserRole{
	UserRoleReader,
	UserRoleAuthor,
	UserRoleEditor,
	UserRoleAdmin,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleReader, UserRoleAuthor, UserRoleEditor, UserRoleAdmin:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
