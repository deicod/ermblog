// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type Category struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description *string   `json:"description,omitempty"`
	ParentID    *string   `json:"parentID,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

func (Category) IsNode()            {}
func (this Category) GetID() string { return this.ID }

type CategoryConnection struct {
	Edges      []*CategoryEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type CategoryEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Category `json:"node,omitempty"`
}

type Comment struct {
	ID          string        `json:"id"`
	PostID      string        `json:"postID"`
	AuthorID    *string       `json:"authorID,omitempty"`
	ParentID    *string       `json:"parentID,omitempty"`
	AuthorName  *string       `json:"authorName,omitempty"`
	AuthorEmail *string       `json:"authorEmail,omitempty"`
	AuthorURL   *string       `json:"authorURL,omitempty"`
	Content     string        `json:"content"`
	Status      CommentStatus `json:"status"`
	SubmittedAt time.Time     `json:"submittedAt"`
	PublishedAt *time.Time    `json:"publishedAt,omitempty"`
	UpdatedAt   time.Time     `json:"updatedAt"`
}

func (Comment) IsNode()            {}
func (this Comment) GetID() string { return this.ID }

type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type CommentEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Comment `json:"node,omitempty"`
}

type CreateCategoryInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               *string    `json:"id,omitempty"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	ParentID         *string    `json:"parentID,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type CreateCategoryPayload struct {
	ClientMutationID *string   `json:"clientMutationId,omitempty"`
	Category         *Category `json:"category,omitempty"`
}

type CreateCommentInput struct {
	ClientMutationID *string        `json:"clientMutationId,omitempty"`
	ID               *string        `json:"id,omitempty"`
	PostID           *string        `json:"postID,omitempty"`
	AuthorID         *string        `json:"authorID,omitempty"`
	ParentID         *string        `json:"parentID,omitempty"`
	AuthorName       *string        `json:"authorName,omitempty"`
	AuthorEmail      *string        `json:"authorEmail,omitempty"`
	AuthorURL        *string        `json:"authorURL,omitempty"`
	Content          *string        `json:"content,omitempty"`
	Status           *CommentStatus `json:"status,omitempty"`
	SubmittedAt      *time.Time     `json:"submittedAt,omitempty"`
	PublishedAt      *time.Time     `json:"publishedAt,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
}

type CreateCommentPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Comment          *Comment `json:"comment,omitempty"`
}

type CreateMediaInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               *string         `json:"id,omitempty"`
	UploadedByID     *string         `json:"uploadedByID,omitempty"`
	FileName         *string         `json:"fileName,omitempty"`
	MimeType         *string         `json:"mimeType,omitempty"`
	StorageKey       *string         `json:"storageKey,omitempty"`
	URL              *string         `json:"url,omitempty"`
	Title            *string         `json:"title,omitempty"`
	AltText          *string         `json:"altText,omitempty"`
	Caption          *string         `json:"caption,omitempty"`
	Description      *string         `json:"description,omitempty"`
	FileSizeBytes    *int            `json:"fileSizeBytes,omitempty"`
	Metadata         json.RawMessage `json:"metadata,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type CreateMediaPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Media            *Media  `json:"media,omitempty"`
}

type CreateOptionInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               *string         `json:"id,omitempty"`
	Name             *string         `json:"name,omitempty"`
	Value            json.RawMessage `json:"value,omitempty"`
	Autoload         *bool           `json:"autoload,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type CreateOptionPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Option           *Option `json:"option,omitempty"`
}

type CreatePostInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               *string         `json:"id,omitempty"`
	AuthorID         *string         `json:"authorID,omitempty"`
	FeaturedMediaID  *string         `json:"featuredMediaID,omitempty"`
	Title            *string         `json:"title,omitempty"`
	Slug             *string         `json:"slug,omitempty"`
	Status           *PostStatus     `json:"status,omitempty"`
	Type             *PostType       `json:"type,omitempty"`
	Excerpt          *string         `json:"excerpt,omitempty"`
	Content          *string         `json:"content,omitempty"`
	Seo              json.RawMessage `json:"seo,omitempty"`
	PublishedAt      *time.Time      `json:"publishedAt,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type CreatePostPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Post             *Post   `json:"post,omitempty"`
}

type CreateRoleInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               *string         `json:"id,omitempty"`
	Name             *string         `json:"name,omitempty"`
	Slug             *string         `json:"slug,omitempty"`
	Description      *string         `json:"description,omitempty"`
	Capabilities     json.RawMessage `json:"capabilities,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type CreateRolePayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Role             *Role   `json:"role,omitempty"`
}

type CreateTagInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               *string    `json:"id,omitempty"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type CreateTagPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Tag              *Tag    `json:"tag,omitempty"`
}

type CreateUserInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               *string    `json:"id,omitempty"`
	Username         *string    `json:"username,omitempty"`
	Email            *string    `json:"email,omitempty"`
	Password         *string    `json:"password,omitempty"`
	DisplayName      *string    `json:"displayName,omitempty"`
	Bio              *string    `json:"bio,omitempty"`
	AvatarURL        *string    `json:"avatarURL,omitempty"`
	WebsiteURL       *string    `json:"websiteURL,omitempty"`
	LastLoginAt      *time.Time `json:"lastLoginAt,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type CreateUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user,omitempty"`
}

type DeleteCategoryInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteCategoryPayload struct {
	ClientMutationID  *string `json:"clientMutationId,omitempty"`
	DeletedCategoryID string  `json:"deletedCategoryID"`
}

type DeleteCommentInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteCommentPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedCommentID string  `json:"deletedCommentID"`
}

type DeleteMediaInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteMediaPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedMediaID   string  `json:"deletedMediaID"`
}

type DeleteOptionInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteOptionPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedOptionID  string  `json:"deletedOptionID"`
}

type DeletePostInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeletePostPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedPostID    string  `json:"deletedPostID"`
}

type DeleteRoleInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteRolePayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedRoleID    string  `json:"deletedRoleID"`
}

type DeleteTagInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteTagPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedTagID     string  `json:"deletedTagID"`
}

type DeleteUserInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	DeletedUserID    string  `json:"deletedUserID"`
}

type ManagementStats struct {
	Posts      int `json:"posts"`
	Comments   int `json:"comments"`
	MediaItems int `json:"mediaItems"`
	Taxonomies int `json:"taxonomies"`
	Users      int `json:"users"`
}

type Media struct {
	ID            string          `json:"id"`
	UploadedByID  *string         `json:"uploadedByID,omitempty"`
	FileName      string          `json:"fileName"`
	MimeType      string          `json:"mimeType"`
	StorageKey    string          `json:"storageKey"`
	URL           string          `json:"url"`
	Title         *string         `json:"title,omitempty"`
	AltText       *string         `json:"altText,omitempty"`
	Caption       *string         `json:"caption,omitempty"`
	Description   *string         `json:"description,omitempty"`
	FileSizeBytes *int            `json:"fileSizeBytes,omitempty"`
	Metadata      json.RawMessage `json:"metadata,omitempty"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
}

func (Media) IsNode()            {}
func (this Media) GetID() string { return this.ID }

type MediaConnection struct {
	Edges      []*MediaEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

type MediaEdge struct {
	Cursor string `json:"cursor"`
	Node   *Media `json:"node,omitempty"`
}

type Mutation struct {
}

type Option struct {
	ID        string          `json:"id"`
	Name      string          `json:"name"`
	Value     json.RawMessage `json:"value"`
	Autoload  bool            `json:"autoload"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
}

func (Option) IsNode()            {}
func (this Option) GetID() string { return this.ID }

type OptionConnection struct {
	Edges      []*OptionEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

type OptionEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Option `json:"node,omitempty"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Post struct {
	ID              string          `json:"id"`
	AuthorID        string          `json:"authorID"`
	FeaturedMediaID *string         `json:"featuredMediaID,omitempty"`
	Title           string          `json:"title"`
	Slug            string          `json:"slug"`
	Status          PostStatus      `json:"status"`
	Type            PostType        `json:"type"`
	Excerpt         *string         `json:"excerpt,omitempty"`
	Content         *string         `json:"content,omitempty"`
	Seo             json.RawMessage `json:"seo,omitempty"`
	PublishedAt     *time.Time      `json:"publishedAt,omitempty"`
	CreatedAt       time.Time       `json:"createdAt"`
	UpdatedAt       time.Time       `json:"updatedAt"`
}

func (Post) IsNode()            {}
func (this Post) GetID() string { return this.ID }

type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node,omitempty"`
}

type Query struct {
}

type Role struct {
	ID           string          `json:"id"`
	Name         string          `json:"name"`
	Slug         string          `json:"slug"`
	Description  *string         `json:"description,omitempty"`
	Capabilities json.RawMessage `json:"capabilities,omitempty"`
	CreatedAt    time.Time       `json:"createdAt"`
	UpdatedAt    time.Time       `json:"updatedAt"`
}

func (Role) IsNode()            {}
func (this Role) GetID() string { return this.ID }

type RoleConnection struct {
	Edges      []*RoleEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type RoleEdge struct {
	Cursor string `json:"cursor"`
	Node   *Role  `json:"node,omitempty"`
}

type Subscription struct {
}

type Tag struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description *string   `json:"description,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

func (Tag) IsNode()            {}
func (this Tag) GetID() string { return this.ID }

type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

type TagEdge struct {
	Cursor string `json:"cursor"`
	Node   *Tag   `json:"node,omitempty"`
}

type UpdateCategoryInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               string     `json:"id"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	ParentID         *string    `json:"parentID,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type UpdateCategoryPayload struct {
	ClientMutationID *string   `json:"clientMutationId,omitempty"`
	Category         *Category `json:"category,omitempty"`
}

type UpdateCommentInput struct {
	ClientMutationID *string        `json:"clientMutationId,omitempty"`
	ID               string         `json:"id"`
	PostID           *string        `json:"postID,omitempty"`
	AuthorID         *string        `json:"authorID,omitempty"`
	ParentID         *string        `json:"parentID,omitempty"`
	AuthorName       *string        `json:"authorName,omitempty"`
	AuthorEmail      *string        `json:"authorEmail,omitempty"`
	AuthorURL        *string        `json:"authorURL,omitempty"`
	Content          *string        `json:"content,omitempty"`
	Status           *CommentStatus `json:"status,omitempty"`
	SubmittedAt      *time.Time     `json:"submittedAt,omitempty"`
	PublishedAt      *time.Time     `json:"publishedAt,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
}

type UpdateCommentPayload struct {
	ClientMutationID *string  `json:"clientMutationId,omitempty"`
	Comment          *Comment `json:"comment,omitempty"`
}

type UpdateMediaInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               string          `json:"id"`
	UploadedByID     *string         `json:"uploadedByID,omitempty"`
	FileName         *string         `json:"fileName,omitempty"`
	MimeType         *string         `json:"mimeType,omitempty"`
	StorageKey       *string         `json:"storageKey,omitempty"`
	URL              *string         `json:"url,omitempty"`
	Title            *string         `json:"title,omitempty"`
	AltText          *string         `json:"altText,omitempty"`
	Caption          *string         `json:"caption,omitempty"`
	Description      *string         `json:"description,omitempty"`
	FileSizeBytes    *int            `json:"fileSizeBytes,omitempty"`
	Metadata         json.RawMessage `json:"metadata,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type UpdateMediaPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Media            *Media  `json:"media,omitempty"`
}

type UpdateOptionInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               string          `json:"id"`
	Name             *string         `json:"name,omitempty"`
	Value            json.RawMessage `json:"value,omitempty"`
	Autoload         *bool           `json:"autoload,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type UpdateOptionPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Option           *Option `json:"option,omitempty"`
}

type UpdatePostInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               string          `json:"id"`
	AuthorID         *string         `json:"authorID,omitempty"`
	FeaturedMediaID  *string         `json:"featuredMediaID,omitempty"`
	Title            *string         `json:"title,omitempty"`
	Slug             *string         `json:"slug,omitempty"`
	Status           *PostStatus     `json:"status,omitempty"`
	Type             *PostType       `json:"type,omitempty"`
	Excerpt          *string         `json:"excerpt,omitempty"`
	Content          *string         `json:"content,omitempty"`
	Seo              json.RawMessage `json:"seo,omitempty"`
	PublishedAt      *time.Time      `json:"publishedAt,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type UpdatePostPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Post             *Post   `json:"post,omitempty"`
}

type UpdateRoleInput struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	ID               string          `json:"id"`
	Name             *string         `json:"name,omitempty"`
	Slug             *string         `json:"slug,omitempty"`
	Description      *string         `json:"description,omitempty"`
	Capabilities     json.RawMessage `json:"capabilities,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
}

type UpdateRolePayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Role             *Role   `json:"role,omitempty"`
}

type UpdateTagInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               string     `json:"id"`
	Name             *string    `json:"name,omitempty"`
	Slug             *string    `json:"slug,omitempty"`
	Description      *string    `json:"description,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type UpdateTagPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Tag              *Tag    `json:"tag,omitempty"`
}

type UpdateUserInput struct {
	ClientMutationID *string    `json:"clientMutationId,omitempty"`
	ID               string     `json:"id"`
	Username         *string    `json:"username,omitempty"`
	Email            *string    `json:"email,omitempty"`
	Password         *string    `json:"password,omitempty"`
	DisplayName      *string    `json:"displayName,omitempty"`
	Bio              *string    `json:"bio,omitempty"`
	AvatarURL        *string    `json:"avatarURL,omitempty"`
	WebsiteURL       *string    `json:"websiteURL,omitempty"`
	LastLoginAt      *time.Time `json:"lastLoginAt,omitempty"`
	CreatedAt        *time.Time `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type UpdateUserPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user,omitempty"`
}

type User struct {
	ID          string     `json:"id"`
	Username    string     `json:"username"`
	Email       string     `json:"email"`
	DisplayName *string    `json:"displayName,omitempty"`
	Bio         *string    `json:"bio,omitempty"`
	AvatarURL   *string    `json:"avatarURL,omitempty"`
	WebsiteURL  *string    `json:"websiteURL,omitempty"`
	LastLoginAt *time.Time `json:"lastLoginAt,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
}

func (User) IsNode()            {}
func (this User) GetID() string { return this.ID }

type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node,omitempty"`
}

type Viewer struct {
	ID          string  `json:"id"`
	DisplayName *string `json:"displayName,omitempty"`
	Email       *string `json:"email,omitempty"`
	AvatarURL   *string `json:"avatarURL,omitempty"`
}

type CommentStatus string

const (
	CommentStatusPending  CommentStatus = "pending"
	CommentStatusApproved CommentStatus = "approved"
	CommentStatusSpam     CommentStatus = "spam"
	CommentStatusTrash    CommentStatus = "trash"
)

var AllCommentStatus = []CommentStatus{
	CommentStatusPending,
	CommentStatusApproved,
	CommentStatusSpam,
	CommentStatusTrash,
}

func (e CommentStatus) IsValid() bool {
	switch e {
	case CommentStatusPending, CommentStatusApproved, CommentStatusSpam, CommentStatusTrash:
		return true
	}
	return false
}

func (e CommentStatus) String() string {
	return string(e)
}

func (e *CommentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentStatus", str)
	}
	return nil
}

func (e CommentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CommentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CommentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PostStatus string

const (
	PostStatusDraft     PostStatus = "draft"
	PostStatusPending   PostStatus = "pending"
	PostStatusPrivate   PostStatus = "private"
	PostStatusPublished PostStatus = "published"
	PostStatusArchived  PostStatus = "archived"
)

var AllPostStatus = []PostStatus{
	PostStatusDraft,
	PostStatusPending,
	PostStatusPrivate,
	PostStatusPublished,
	PostStatusArchived,
}

func (e PostStatus) IsValid() bool {
	switch e {
	case PostStatusDraft, PostStatusPending, PostStatusPrivate, PostStatusPublished, PostStatusArchived:
		return true
	}
	return false
}

func (e PostStatus) String() string {
	return string(e)
}

func (e *PostStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostStatus", str)
	}
	return nil
}

func (e PostStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PostStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PostStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PostType string

const (
	PostTypePost   PostType = "post"
	PostTypePage   PostType = "page"
	PostTypeCustom PostType = "custom"
)

var AllPostType = []PostType{
	PostTypePost,
	PostTypePage,
	PostTypeCustom,
}

func (e PostType) IsValid() bool {
	switch e {
	case PostTypePost, PostTypePage, PostTypeCustom:
		return true
	}
	return false
}

func (e PostType) String() string {
	return string(e)
}

func (e *PostType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostType", str)
	}
	return nil
}

func (e PostType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PostType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PostType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
