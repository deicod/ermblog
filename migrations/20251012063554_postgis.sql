-- Code generated by erm.
-- Schema migration.

CREATE EXTENSION IF NOT EXISTS postgis;

CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE categories (
    id uuid NOT NULL,
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    description text,
    color text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS categories_slug_unique ON categories (slug);

CREATE TABLE comments (
    id uuid NOT NULL,
    post_id uuid NOT NULL,
    author_id uuid NOT NULL,
    parent_id uuid,
    body text NOT NULL,
    is_edited boolean NOT NULL DEFAULT false,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    parent uuid,
    post uuid NOT NULL,
    PRIMARY KEY (id)
);

CREATE INDEX IF NOT EXISTS comments_parent_created_at ON comments (parent_id, created_at);

CREATE INDEX IF NOT EXISTS comments_post_created_at ON comments (post_id, created_at);

ALTER TABLE comments ADD CONSTRAINT fk_comments_author_id FOREIGN KEY (author_id) REFERENCES users (id);

ALTER TABLE comments ADD CONSTRAINT fk_comments_parent FOREIGN KEY (parent) REFERENCES comments (id);

ALTER TABLE comments ADD CONSTRAINT fk_comments_parent_id FOREIGN KEY (parent_id) REFERENCES comments (id);

ALTER TABLE comments ADD CONSTRAINT fk_comments_post FOREIGN KEY (post) REFERENCES posts (id);

ALTER TABLE comments ADD CONSTRAINT fk_comments_post_id FOREIGN KEY (post_id) REFERENCES posts (id);

CREATE TABLE post_tags (
    id uuid NOT NULL,
    post_id uuid NOT NULL,
    tag_id uuid NOT NULL,
    assigned_at timestamptz NOT NULL DEFAULT now(),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    post uuid NOT NULL,
    tag uuid NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS post_tags_post_tag_unique ON post_tags (post_id, tag_id);

ALTER TABLE post_tags ADD CONSTRAINT fk_post_tags_post FOREIGN KEY (post) REFERENCES posts (id);

ALTER TABLE post_tags ADD CONSTRAINT fk_post_tags_post_id FOREIGN KEY (post_id) REFERENCES posts (id);

ALTER TABLE post_tags ADD CONSTRAINT fk_post_tags_tag FOREIGN KEY (tag) REFERENCES tags (id);

ALTER TABLE post_tags ADD CONSTRAINT fk_post_tags_tag_id FOREIGN KEY (tag_id) REFERENCES tags (id);

CREATE TABLE posts (
    id uuid NOT NULL,
    author_id uuid NOT NULL,
    category_id uuid,
    title text NOT NULL,
    slug text NOT NULL UNIQUE,
    excerpt text,
    body text,
    published_at timestamptz,
    is_published boolean NOT NULL DEFAULT false,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE INDEX IF NOT EXISTS posts_author_published_at ON posts (author_id, published_at);

CREATE UNIQUE INDEX IF NOT EXISTS posts_slug_unique ON posts (slug);

ALTER TABLE posts ADD CONSTRAINT fk_posts_author_id FOREIGN KEY (author_id) REFERENCES users (id);

ALTER TABLE posts ADD CONSTRAINT fk_posts_category_id FOREIGN KEY (category_id) REFERENCES categories (id);

CREATE TABLE tags (
    id uuid NOT NULL,
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    description text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS tags_name_unique ON tags (name);

CREATE UNIQUE INDEX IF NOT EXISTS tags_slug_unique ON tags (slug);

CREATE TABLE users (
    id uuid NOT NULL,
    username text NOT NULL UNIQUE,
    email text NOT NULL UNIQUE,
    name text,
    bio text,
    avatar_url text,
    display_name text GENERATED ALWAYS AS (COALESCE(name, username)) STORED NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS users_email_unique ON users (email);

CREATE UNIQUE INDEX IF NOT EXISTS users_username_unique ON users (username);
