-- Code generated by erm.
-- Schema migration.

CREATE EXTENSION IF NOT EXISTS postgis;

CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE categories (
    id uuid NOT NULL,
    name varchar(160) NOT NULL UNIQUE,
    slug text GENERATED ALWAYS AS (lower(regexp_replace(name, '[^a-z0-9]+', '-', 'g'))) STORED NOT NULL UNIQUE,
    description text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS categories_slug_unique ON categories (slug);

CREATE TABLE comments (
    id uuid NOT NULL,
    post_id uuid NOT NULL,
    author_id uuid NOT NULL,
    parent_id uuid,
    body text NOT NULL,
    status text NOT NULL DEFAULT 'VISIBLE' CONSTRAINT comments_status_enum_check CHECK (status IN ('VISIBLE', 'PENDING', 'HIDDEN')),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE INDEX IF NOT EXISTS comments_author_created_at ON comments (author_id, created_at);

CREATE INDEX IF NOT EXISTS comments_parent_created_at ON comments (parent_id, created_at);

CREATE INDEX IF NOT EXISTS comments_post_created_at ON comments (post_id, created_at);

ALTER TABLE comments ADD CONSTRAINT fk_comments_author_id FOREIGN KEY (author_id) REFERENCES users (id);

ALTER TABLE comments ADD CONSTRAINT fk_comments_parent_id FOREIGN KEY (parent_id) REFERENCES comments (id);

ALTER TABLE comments ADD CONSTRAINT fk_comments_post_id FOREIGN KEY (post_id) REFERENCES posts (id);

CREATE TABLE posts (
    id uuid NOT NULL,
    author_id uuid NOT NULL,
    category_id uuid,
    title text NOT NULL,
    slug text GENERATED ALWAYS AS (lower(regexp_replace(title, '[^a-z0-9]+', '-', 'g'))) STORED NOT NULL UNIQUE,
    excerpt text,
    body text,
    status text NOT NULL DEFAULT 'DRAFT' CONSTRAINT posts_status_enum_check CHECK (status IN ('DRAFT', 'PUBLISHED', 'ARCHIVED')),
    is_featured boolean NOT NULL DEFAULT FALSE,
    published_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE INDEX IF NOT EXISTS posts_author_created_at ON posts (author_id, created_at);

CREATE INDEX IF NOT EXISTS posts_category_created_at ON posts (category_id, created_at);

CREATE UNIQUE INDEX IF NOT EXISTS posts_slug_unique ON posts (slug);

CREATE INDEX IF NOT EXISTS posts_status_published_at ON posts (status, published_at);

ALTER TABLE posts ADD CONSTRAINT fk_posts_author_id FOREIGN KEY (author_id) REFERENCES users (id);

ALTER TABLE posts ADD CONSTRAINT fk_posts_category_id FOREIGN KEY (category_id) REFERENCES categories (id);

CREATE TABLE tags (
    id uuid NOT NULL,
    name varchar(120) NOT NULL UNIQUE,
    slug text GENERATED ALWAYS AS (lower(regexp_replace(name, '[^a-z0-9]+', '-', 'g'))) STORED NOT NULL UNIQUE,
    description text,
    color varchar(7),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS tags_slug_unique ON tags (slug);

CREATE TABLE users (
    id uuid NOT NULL,
    username varchar(50) NOT NULL UNIQUE,
    email varchar(320) NOT NULL UNIQUE,
    slug text GENERATED ALWAYS AS (lower(regexp_replace(username, '[^a-z0-9]+', '-', 'g'))) STORED NOT NULL UNIQUE,
    display_name text,
    bio text,
    avatar_url varchar(2048),
    role text NOT NULL DEFAULT 'READER' CONSTRAINT users_role_enum_check CHECK (role IN ('READER', 'AUTHOR', 'EDITOR', 'ADMIN')),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL,
    PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS users_email_unique ON users (email);

CREATE INDEX IF NOT EXISTS users_role_created_at ON users (role, created_at);

CREATE UNIQUE INDEX IF NOT EXISTS users_slug_unique ON users (slug);

CREATE UNIQUE INDEX IF NOT EXISTS users_username_unique ON users (username);

CREATE TABLE post_tags (
    post_id uuid NOT NULL,
    tag_id uuid NOT NULL,
    PRIMARY KEY (post_id, tag_id)
);

ALTER TABLE post_tags ADD CONSTRAINT fk_post_tags_post_id FOREIGN KEY (post_id) REFERENCES posts (id);

ALTER TABLE post_tags ADD CONSTRAINT fk_post_tags_tag_id FOREIGN KEY (tag_id) REFERENCES tags (id);
