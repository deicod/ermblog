// Code generated by erm. DO NOT EDIT.
package gen

import (
	"encoding/json"
	"time"
)

type Category struct {
	ID          string         `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Slug        string         `db:"slug" json:"slug"`
	Description *string        `db:"description,omitempty" json:"description,omitempty"`
	ParentID    *string        `db:"parent_id,omitempty" json:"parent_id,omitempty"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
	Edges       *CategoryEdges `json:"edges,omitempty"`
}

type CategoryEdges struct {
	loaded   map[string]bool
	Parent   *Category   `json:"parent,omitempty"`
	Children []*Category `json:"children,omitempty"`
	Posts    []*Post     `json:"posts,omitempty"`
}

func (e *CategoryEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureCategoryEdges(m *Category) *CategoryEdges {
	if m.Edges == nil {
		m.Edges = &CategoryEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Category) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Category) SetParent(value *Category) {
	edges := ensureCategoryEdges(m)
	edges.Parent = value
	edges.markLoaded("parent")
}

func (m *Category) SetChildren(values []*Category) {
	edges := ensureCategoryEdges(m)
	if values == nil {
		values = []*Category{}
	}
	edges.Children = values
	edges.markLoaded("children")
}

func (m *Category) SetPosts(values []*Post) {
	edges := ensureCategoryEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.Posts = values
	edges.markLoaded("posts")
}

type Comment struct {
	ID          string        `db:"id" json:"id"`
	PostID      string        `db:"post_id" json:"post_id"`
	AuthorID    *string       `db:"author_id,omitempty" json:"author_id,omitempty"`
	ParentID    *string       `db:"parent_id,omitempty" json:"parent_id,omitempty"`
	AuthorName  *string       `db:"author_name,omitempty" json:"author_name,omitempty"`
	AuthorEmail *string       `db:"author_email,omitempty" json:"author_email,omitempty"`
	AuthorURL   *string       `db:"author_url,omitempty" json:"author_url,omitempty"`
	Content     string        `db:"content" json:"content"`
	Status      string        `db:"status" json:"status"`
	SubmittedAt time.Time     `db:"submitted_at" json:"submitted_at"`
	PublishedAt *time.Time    `db:"published_at,omitempty" json:"published_at,omitempty"`
	UpdatedAt   time.Time     `db:"updated_at" json:"updated_at"`
	Edges       *CommentEdges `json:"edges,omitempty"`
}

type CommentEdges struct {
	loaded  map[string]bool
	Post    *Post      `json:"post,omitempty"`
	Author  *User      `json:"author,omitempty"`
	Parent  *Comment   `json:"parent,omitempty"`
	Replies []*Comment `json:"replies,omitempty"`
}

func (e *CommentEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureCommentEdges(m *Comment) *CommentEdges {
	if m.Edges == nil {
		m.Edges = &CommentEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Comment) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Comment) SetPost(value *Post) {
	edges := ensureCommentEdges(m)
	edges.Post = value
	edges.markLoaded("post")
}

func (m *Comment) SetAuthor(value *User) {
	edges := ensureCommentEdges(m)
	edges.Author = value
	edges.markLoaded("author")
}

func (m *Comment) SetParent(value *Comment) {
	edges := ensureCommentEdges(m)
	edges.Parent = value
	edges.markLoaded("parent")
}

func (m *Comment) SetReplies(values []*Comment) {
	edges := ensureCommentEdges(m)
	if values == nil {
		values = []*Comment{}
	}
	edges.Replies = values
	edges.markLoaded("replies")
}

type Media struct {
	ID            string          `db:"id" json:"id"`
	UploadedByID  *string         `db:"uploaded_by_id,omitempty" json:"uploaded_by_id,omitempty"`
	FileName      string          `db:"file_name" json:"file_name"`
	MimeType      string          `db:"mime_type" json:"mime_type"`
	StorageKey    string          `db:"storage_key" json:"storage_key"`
	URL           string          `db:"url" json:"url"`
	Title         *string         `db:"title,omitempty" json:"title,omitempty"`
	AltText       *string         `db:"alt_text,omitempty" json:"alt_text,omitempty"`
	Caption       *string         `db:"caption,omitempty" json:"caption,omitempty"`
	Description   *string         `db:"description,omitempty" json:"description,omitempty"`
	FileSizeBytes *int32          `db:"file_size_bytes,omitempty" json:"file_size_bytes,omitempty"`
	Metadata      json.RawMessage `db:"metadata,omitempty" json:"metadata,omitempty"`
	CreatedAt     time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt     time.Time       `db:"updated_at" json:"updated_at"`
	Edges         *MediaEdges     `json:"edges,omitempty"`
}

type MediaEdges struct {
	loaded          map[string]bool
	UploadedBy      *User   `json:"uploaded_by,omitempty"`
	FeaturedInPosts []*Post `json:"featured_in_posts,omitempty"`
}

func (e *MediaEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureMediaEdges(m *Media) *MediaEdges {
	if m.Edges == nil {
		m.Edges = &MediaEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Media) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Media) SetUploadedBy(value *User) {
	edges := ensureMediaEdges(m)
	edges.UploadedBy = value
	edges.markLoaded("uploaded_by")
}

func (m *Media) SetFeaturedInPosts(values []*Post) {
	edges := ensureMediaEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.FeaturedInPosts = values
	edges.markLoaded("featured_in_posts")
}

type Option struct {
	ID        string          `db:"id" json:"id"`
	Name      string          `db:"name" json:"name"`
	Value     json.RawMessage `db:"value" json:"value"`
	Autoload  bool            `db:"autoload" json:"autoload"`
	CreatedAt time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt time.Time       `db:"updated_at" json:"updated_at"`
}

type Post struct {
	ID              string          `db:"id" json:"id"`
	AuthorID        string          `db:"author_id" json:"author_id"`
	FeaturedMediaID *string         `db:"featured_media_id,omitempty" json:"featured_media_id,omitempty"`
	Title           string          `db:"title" json:"title"`
	Slug            string          `db:"slug" json:"slug"`
	Status          string          `db:"status" json:"status"`
	Type            string          `db:"type" json:"type"`
	Excerpt         *string         `db:"excerpt,omitempty" json:"excerpt,omitempty"`
	Content         *string         `db:"content,omitempty" json:"content,omitempty"`
	Seo             json.RawMessage `db:"seo,omitempty" json:"seo,omitempty"`
	PublishedAt     *time.Time      `db:"published_at,omitempty" json:"published_at,omitempty"`
	CreatedAt       time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time       `db:"updated_at" json:"updated_at"`
	Edges           *PostEdges      `json:"edges,omitempty"`
}

type PostEdges struct {
	loaded        map[string]bool
	Author        *User       `json:"author,omitempty"`
	FeaturedMedia *Media      `json:"featured_media,omitempty"`
	Comments      []*Comment  `json:"comments,omitempty"`
	Categories    []*Category `json:"categories,omitempty"`
	Tags          []*Tag      `json:"tags,omitempty"`
}

func (e *PostEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensurePostEdges(m *Post) *PostEdges {
	if m.Edges == nil {
		m.Edges = &PostEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Post) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Post) SetAuthor(value *User) {
	edges := ensurePostEdges(m)
	edges.Author = value
	edges.markLoaded("author")
}

func (m *Post) SetFeaturedMedia(value *Media) {
	edges := ensurePostEdges(m)
	edges.FeaturedMedia = value
	edges.markLoaded("featured_media")
}

func (m *Post) SetComments(values []*Comment) {
	edges := ensurePostEdges(m)
	if values == nil {
		values = []*Comment{}
	}
	edges.Comments = values
	edges.markLoaded("comments")
}

func (m *Post) SetCategories(values []*Category) {
	edges := ensurePostEdges(m)
	if values == nil {
		values = []*Category{}
	}
	edges.Categories = values
	edges.markLoaded("categories")
}

func (m *Post) SetTags(values []*Tag) {
	edges := ensurePostEdges(m)
	if values == nil {
		values = []*Tag{}
	}
	edges.Tags = values
	edges.markLoaded("tags")
}

type Role struct {
	ID           string          `db:"id" json:"id"`
	Name         string          `db:"name" json:"name"`
	Slug         string          `db:"slug" json:"slug"`
	Description  *string         `db:"description,omitempty" json:"description,omitempty"`
	Capabilities json.RawMessage `db:"capabilities,omitempty" json:"capabilities,omitempty"`
	CreatedAt    time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt    time.Time       `db:"updated_at" json:"updated_at"`
	Edges        *RoleEdges      `json:"edges,omitempty"`
}

type RoleEdges struct {
	loaded map[string]bool
	Users  []*User `json:"users,omitempty"`
}

func (e *RoleEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureRoleEdges(m *Role) *RoleEdges {
	if m.Edges == nil {
		m.Edges = &RoleEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Role) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Role) SetUsers(values []*User) {
	edges := ensureRoleEdges(m)
	if values == nil {
		values = []*User{}
	}
	edges.Users = values
	edges.markLoaded("users")
}

type Tag struct {
	ID          string    `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	Slug        string    `db:"slug" json:"slug"`
	Description *string   `db:"description,omitempty" json:"description,omitempty"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
	Edges       *TagEdges `json:"edges,omitempty"`
}

type TagEdges struct {
	loaded map[string]bool
	Posts  []*Post `json:"posts,omitempty"`
}

func (e *TagEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureTagEdges(m *Tag) *TagEdges {
	if m.Edges == nil {
		m.Edges = &TagEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Tag) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Tag) SetPosts(values []*Post) {
	edges := ensureTagEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.Posts = values
	edges.markLoaded("posts")
}

type User struct {
	ID          string     `db:"id" json:"id"`
	Username    string     `db:"username" json:"username"`
	Email       string     `db:"email" json:"email"`
	Password    string     `db:"password_hash" json:"password"`
	DisplayName *string    `db:"display_name,omitempty" json:"display_name,omitempty"`
	Bio         *string    `db:"bio,omitempty" json:"bio,omitempty"`
	AvatarURL   *string    `db:"avatar_url,omitempty" json:"avatar_url,omitempty"`
	WebsiteURL  *string    `db:"website_url,omitempty" json:"website_url,omitempty"`
	LastLoginAt *time.Time `db:"last_login_at,omitempty" json:"last_login_at,omitempty"`
	CreatedAt   time.Time  `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time  `db:"updated_at" json:"updated_at"`
	Edges       *UserEdges `json:"edges,omitempty"`
}

type UserEdges struct {
	loaded   map[string]bool
	Posts    []*Post    `json:"posts,omitempty"`
	Comments []*Comment `json:"comments,omitempty"`
	Media    []*Media   `json:"media,omitempty"`
	Roles    []*Role    `json:"roles,omitempty"`
}

func (e *UserEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureUserEdges(m *User) *UserEdges {
	if m.Edges == nil {
		m.Edges = &UserEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *User) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *User) SetPosts(values []*Post) {
	edges := ensureUserEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.Posts = values
	edges.markLoaded("posts")
}

func (m *User) SetComments(values []*Comment) {
	edges := ensureUserEdges(m)
	if values == nil {
		values = []*Comment{}
	}
	edges.Comments = values
	edges.markLoaded("comments")
}

func (m *User) SetMedia(values []*Media) {
	edges := ensureUserEdges(m)
	if values == nil {
		values = []*Media{}
	}
	edges.Media = values
	edges.markLoaded("media")
}

func (m *User) SetRoles(values []*Role) {
	edges := ensureUserEdges(m)
	if values == nil {
		values = []*Role{}
	}
	edges.Roles = values
	edges.markLoaded("roles")
}
