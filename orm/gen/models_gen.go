// Code generated by erm. DO NOT EDIT.
package gen

import (
	"time"
)

type Category struct {
	ID          string         `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Slug        string         `db:"slug" json:"slug"`
	Description *string        `db:"description,omitempty" json:"description,omitempty"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
	Edges       *CategoryEdges `json:"edges,omitempty"`
}

type CategoryEdges struct {
	loaded map[string]bool
	Posts  []*Post `json:"posts,omitempty"`
}

func (e *CategoryEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureCategoryEdges(m *Category) *CategoryEdges {
	if m.Edges == nil {
		m.Edges = &CategoryEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Category) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Category) SetPosts(values []*Post) {
	edges := ensureCategoryEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.Posts = values
	edges.markLoaded("posts")
}

type Comment struct {
	ID        string        `db:"id" json:"id"`
	PostID    string        `db:"post_id" json:"post_id"`
	AuthorID  string        `db:"author_id" json:"author_id"`
	ParentID  *string       `db:"parent_id,omitempty" json:"parent_id,omitempty"`
	Body      string        `db:"body" json:"body"`
	Status    string        `db:"status" json:"status"`
	CreatedAt time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt time.Time     `db:"updated_at" json:"updated_at"`
	Edges     *CommentEdges `json:"edges,omitempty"`
}

type CommentEdges struct {
	loaded  map[string]bool
	Post    *Post      `json:"post,omitempty"`
	Author  *User      `json:"author,omitempty"`
	Parent  *Comment   `json:"parent,omitempty"`
	Replies []*Comment `json:"replies,omitempty"`
}

func (e *CommentEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureCommentEdges(m *Comment) *CommentEdges {
	if m.Edges == nil {
		m.Edges = &CommentEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Comment) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Comment) SetPost(value *Post) {
	edges := ensureCommentEdges(m)
	edges.Post = value
	edges.markLoaded("post")
}

func (m *Comment) SetAuthor(value *User) {
	edges := ensureCommentEdges(m)
	edges.Author = value
	edges.markLoaded("author")
}

func (m *Comment) SetParent(value *Comment) {
	edges := ensureCommentEdges(m)
	edges.Parent = value
	edges.markLoaded("parent")
}

func (m *Comment) SetReplies(values []*Comment) {
	edges := ensureCommentEdges(m)
	if values == nil {
		values = []*Comment{}
	}
	edges.Replies = values
	edges.markLoaded("replies")
}

type Post struct {
	ID          string     `db:"id" json:"id"`
	AuthorID    string     `db:"author_id" json:"author_id"`
	CategoryID  *string    `db:"category_id,omitempty" json:"category_id,omitempty"`
	Title       string     `db:"title" json:"title"`
	Slug        string     `db:"slug" json:"slug"`
	Excerpt     *string    `db:"excerpt,omitempty" json:"excerpt,omitempty"`
	Body        *string    `db:"body,omitempty" json:"body,omitempty"`
	Status      string     `db:"status" json:"status"`
	IsFeatured  bool       `db:"is_featured" json:"is_featured"`
	PublishedAt *time.Time `db:"published_at,omitempty" json:"published_at,omitempty"`
	CreatedAt   time.Time  `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time  `db:"updated_at" json:"updated_at"`
	Edges       *PostEdges `json:"edges,omitempty"`
}

type PostEdges struct {
	loaded   map[string]bool
	Author   *User      `json:"author,omitempty"`
	Category *Category  `json:"category,omitempty"`
	Comments []*Comment `json:"comments,omitempty"`
	Tags     []*Tag     `json:"tags,omitempty"`
}

func (e *PostEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensurePostEdges(m *Post) *PostEdges {
	if m.Edges == nil {
		m.Edges = &PostEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Post) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Post) SetAuthor(value *User) {
	edges := ensurePostEdges(m)
	edges.Author = value
	edges.markLoaded("author")
}

func (m *Post) SetCategory(value *Category) {
	edges := ensurePostEdges(m)
	edges.Category = value
	edges.markLoaded("category")
}

func (m *Post) SetComments(values []*Comment) {
	edges := ensurePostEdges(m)
	if values == nil {
		values = []*Comment{}
	}
	edges.Comments = values
	edges.markLoaded("comments")
}

func (m *Post) SetTags(values []*Tag) {
	edges := ensurePostEdges(m)
	if values == nil {
		values = []*Tag{}
	}
	edges.Tags = values
	edges.markLoaded("tags")
}

type Tag struct {
	ID          string    `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	Slug        string    `db:"slug" json:"slug"`
	Description *string   `db:"description,omitempty" json:"description,omitempty"`
	Color       *string   `db:"color,omitempty" json:"color,omitempty"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
	Edges       *TagEdges `json:"edges,omitempty"`
}

type TagEdges struct {
	loaded map[string]bool
	Posts  []*Post `json:"posts,omitempty"`
}

func (e *TagEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureTagEdges(m *Tag) *TagEdges {
	if m.Edges == nil {
		m.Edges = &TagEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *Tag) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *Tag) SetPosts(values []*Post) {
	edges := ensureTagEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.Posts = values
	edges.markLoaded("posts")
}

type User struct {
	ID          string     `db:"id" json:"id"`
	Username    string     `db:"username" json:"username"`
	Email       string     `db:"email" json:"email"`
	Slug        string     `db:"slug" json:"slug"`
	DisplayName *string    `db:"display_name,omitempty" json:"display_name,omitempty"`
	Bio         *string    `db:"bio,omitempty" json:"bio,omitempty"`
	AvatarURL   *string    `db:"avatar_url,omitempty" json:"avatar_url,omitempty"`
	Role        string     `db:"role" json:"role"`
	CreatedAt   time.Time  `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time  `db:"updated_at" json:"updated_at"`
	Edges       *UserEdges `json:"edges,omitempty"`
}

type UserEdges struct {
	loaded   map[string]bool
	Posts    []*Post    `json:"posts,omitempty"`
	Comments []*Comment `json:"comments,omitempty"`
}

func (e *UserEdges) markLoaded(name string) {
	if e == nil {
		return
	}
	if e.loaded == nil {
		e.loaded = make(map[string]bool)
	}
	e.loaded[name] = true
}

func ensureUserEdges(m *User) *UserEdges {
	if m.Edges == nil {
		m.Edges = &UserEdges{}
	}
	if m.Edges.loaded == nil {
		m.Edges.loaded = make(map[string]bool)
	}
	return m.Edges
}

func (m *User) EdgeLoaded(name string) bool {
	if m == nil || m.Edges == nil || m.Edges.loaded == nil {
		return false
	}
	return m.Edges.loaded[name]
}

func (m *User) SetPosts(values []*Post) {
	edges := ensureUserEdges(m)
	if values == nil {
		values = []*Post{}
	}
	edges.Posts = values
	edges.markLoaded("posts")
}

func (m *User) SetComments(values []*Comment) {
	edges := ensureUserEdges(m)
	if values == nil {
		values = []*Comment{}
	}
	edges.Comments = values
	edges.markLoaded("comments")
}
