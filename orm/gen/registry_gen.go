// Code generated by erm. DO NOT EDIT.
package gen

import (
	"github.com/deicod/erm/orm/dsl"
	"github.com/deicod/erm/orm/runtime"
)

var Registry = runtime.Registry{
	Entities: map[string]runtime.EntitySpec{
		"Category": {
			Name:  "Category",
			Table: "categories",
			Fields: []runtime.FieldSpec{
				{Name: "id", Column: "id", GoType: "string", Type: dsl.TypeUUID, Primary: true, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "name", Column: "name", GoType: "string", Type: dsl.TypeVarChar, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"length": 160, "notEmpty": true}, EnumValues: nil, EnumName: ""},
				{Name: "slug", Column: "slug", GoType: "string", Type: dsl.TypeText, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: true, ComputedSpec: &dsl.ComputedColumn{Expression: dsl.ExpressionSpec{SQL: "lower(regexp_replace(name, '[^a-z0-9]+', '-', 'g'))", Dependencies: []string{"name"}}, Stored: true, ReadOnly: true}, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "description", Column: "description", GoType: "*string", Type: dsl.TypeText, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "created_at", Column: "created_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: true, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "updated_at", Column: "updated_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: true, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
			},
			Edges: []runtime.EdgeSpec{
				{Name: "posts", Column: "posts", RefName: "category_id", Through: "", Target: "Post", Kind: dsl.EdgeToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
			},
			Indexes: []runtime.IndexSpec{
				{Name: "categories_slug_unique", Columns: []string{"slug"}, Unique: true, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
			},
		},
		"Comment": {
			Name:  "Comment",
			Table: "comments",
			Fields: []runtime.FieldSpec{
				{Name: "id", Column: "id", GoType: "string", Type: dsl.TypeUUID, Primary: true, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "post_id", Column: "post_id", GoType: "string", Type: dsl.TypeUUID, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "author_id", Column: "author_id", GoType: "string", Type: dsl.TypeUUID, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "parent_id", Column: "parent_id", GoType: "*string", Type: dsl.TypeUUID, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "body", Column: "body", GoType: "string", Type: dsl.TypeText, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"notEmpty": true}, EnumValues: nil, EnumName: ""},
				{Name: "status", Column: "status", GoType: "string", Type: dsl.TypeEnum, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "'VISIBLE'", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"enum": true, "enum_name": "CommentStatus", "enum_values": []string{"VISIBLE", "PENDING", "HIDDEN"}}, EnumValues: []string{"VISIBLE", "PENDING", "HIDDEN"}, EnumName: "CommentStatus"},
				{Name: "created_at", Column: "created_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: true, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "updated_at", Column: "updated_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: true, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
			},
			Edges: []runtime.EdgeSpec{
				{Name: "post", Column: "post_id", RefName: "", Through: "", Target: "Post", Kind: dsl.EdgeToOne, Nullable: false, Unique: false, Annotations: nil, Inverse: "comments", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeCascade, OnUpdate: runtime.CascadeUnset}},
				{Name: "author", Column: "author_id", RefName: "", Through: "", Target: "User", Kind: dsl.EdgeToOne, Nullable: false, Unique: false, Annotations: nil, Inverse: "comments", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeCascade, OnUpdate: runtime.CascadeUnset}},
				{Name: "parent", Column: "parent_id", RefName: "", Through: "", Target: "Comment", Kind: dsl.EdgeToOne, Nullable: true, Unique: false, Annotations: nil, Inverse: "", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeSetNull, OnUpdate: runtime.CascadeUnset}},
				{Name: "replies", Column: "replies", RefName: "parent_id", Through: "", Target: "Comment", Kind: dsl.EdgeToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
			},
			Indexes: []runtime.IndexSpec{
				{Name: "comments_post_created_at", Columns: []string{"post_id", "created_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "comments_author_created_at", Columns: []string{"author_id", "created_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "comments_parent_created_at", Columns: []string{"parent_id", "created_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
			},
		},
		"Post": {
			Name:  "Post",
			Table: "posts",
			Fields: []runtime.FieldSpec{
				{Name: "id", Column: "id", GoType: "string", Type: dsl.TypeUUID, Primary: true, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "author_id", Column: "author_id", GoType: "string", Type: dsl.TypeUUID, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "category_id", Column: "category_id", GoType: "*string", Type: dsl.TypeUUID, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "title", Column: "title", GoType: "string", Type: dsl.TypeText, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"notEmpty": true}, EnumValues: nil, EnumName: ""},
				{Name: "slug", Column: "slug", GoType: "string", Type: dsl.TypeText, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: true, ComputedSpec: &dsl.ComputedColumn{Expression: dsl.ExpressionSpec{SQL: "lower(regexp_replace(title, '[^a-z0-9]+', '-', 'g'))", Dependencies: []string{"title"}}, Stored: true, ReadOnly: true}, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "excerpt", Column: "excerpt", GoType: "*string", Type: dsl.TypeText, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "body", Column: "body", GoType: "*string", Type: dsl.TypeText, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "status", Column: "status", GoType: "string", Type: dsl.TypeEnum, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "'DRAFT'", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"enum": true, "enum_name": "PostStatus", "enum_values": []string{"DRAFT", "PUBLISHED", "ARCHIVED"}}, EnumValues: []string{"DRAFT", "PUBLISHED", "ARCHIVED"}, EnumName: "PostStatus"},
				{Name: "is_featured", Column: "is_featured", GoType: "bool", Type: dsl.TypeBoolean, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "FALSE", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "published_at", Column: "published_at", GoType: "*time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "created_at", Column: "created_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: true, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "updated_at", Column: "updated_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: true, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
			},
			Edges: []runtime.EdgeSpec{
				{Name: "author", Column: "author_id", RefName: "", Through: "", Target: "User", Kind: dsl.EdgeToOne, Nullable: false, Unique: false, Annotations: nil, Inverse: "posts", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeCascade, OnUpdate: runtime.CascadeUnset}},
				{Name: "category", Column: "category_id", RefName: "", Through: "", Target: "Category", Kind: dsl.EdgeToOne, Nullable: true, Unique: false, Annotations: nil, Inverse: "posts", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeSetNull, OnUpdate: runtime.CascadeUnset}},
				{Name: "comments", Column: "comments", RefName: "post_id", Through: "", Target: "Comment", Kind: dsl.EdgeToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
				{Name: "tags", Column: "tags", RefName: "", Through: "post_tags", Target: "Tag", Kind: dsl.EdgeManyToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "posts", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
			},
			Indexes: []runtime.IndexSpec{
				{Name: "posts_slug_unique", Columns: []string{"slug"}, Unique: true, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "posts_author_created_at", Columns: []string{"author_id", "created_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "posts_status_published_at", Columns: []string{"status", "published_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "posts_category_created_at", Columns: []string{"category_id", "created_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
			},
		},
		"Tag": {
			Name:  "Tag",
			Table: "tags",
			Fields: []runtime.FieldSpec{
				{Name: "id", Column: "id", GoType: "string", Type: dsl.TypeUUID, Primary: true, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "name", Column: "name", GoType: "string", Type: dsl.TypeVarChar, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"length": 120, "notEmpty": true}, EnumValues: nil, EnumName: ""},
				{Name: "slug", Column: "slug", GoType: "string", Type: dsl.TypeText, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: true, ComputedSpec: &dsl.ComputedColumn{Expression: dsl.ExpressionSpec{SQL: "lower(regexp_replace(name, '[^a-z0-9]+', '-', 'g'))", Dependencies: []string{"name"}}, Stored: true, ReadOnly: true}, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "description", Column: "description", GoType: "*string", Type: dsl.TypeText, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "color", Column: "color", GoType: "*string", Type: dsl.TypeVarChar, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"length": 7}, EnumValues: nil, EnumName: ""},
				{Name: "created_at", Column: "created_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: true, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "updated_at", Column: "updated_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: true, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
			},
			Edges: []runtime.EdgeSpec{
				{Name: "posts", Column: "posts", RefName: "", Through: "post_tags", Target: "Post", Kind: dsl.EdgeManyToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "tags", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
			},
			Indexes: []runtime.IndexSpec{
				{Name: "tags_slug_unique", Columns: []string{"slug"}, Unique: true, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
			},
		},
		"User": {
			Name:  "User",
			Table: "users",
			Fields: []runtime.FieldSpec{
				{Name: "id", Column: "id", GoType: "string", Type: dsl.TypeUUID, Primary: true, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "username", Column: "username", GoType: "string", Type: dsl.TypeVarChar, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"length": 50, "notEmpty": true}, EnumValues: nil, EnumName: ""},
				{Name: "email", Column: "email", GoType: "string", Type: dsl.TypeVarChar, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"length": 320, "notEmpty": true}, EnumValues: nil, EnumName: ""},
				{Name: "slug", Column: "slug", GoType: "string", Type: dsl.TypeText, Primary: false, Nullable: false, Unique: true, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: true, ComputedSpec: &dsl.ComputedColumn{Expression: dsl.ExpressionSpec{SQL: "lower(regexp_replace(username, '[^a-z0-9]+', '-', 'g'))", Dependencies: []string{"username"}}, Stored: true, ReadOnly: true}, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "display_name", Column: "display_name", GoType: "*string", Type: dsl.TypeText, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "bio", Column: "bio", GoType: "*string", Type: dsl.TypeText, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "avatar_url", Column: "avatar_url", GoType: "*string", Type: dsl.TypeVarChar, Primary: false, Nullable: true, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"length": 2048}, EnumValues: nil, EnumName: ""},
				{Name: "role", Column: "role", GoType: "string", Type: dsl.TypeEnum, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: false, DefaultExpr: "'READER'", ReadOnly: false, ComputedSpec: nil, Annotations: map[string]any{"enum": true, "enum_name": "UserRole", "enum_values": []string{"READER", "AUTHOR", "EDITOR", "ADMIN"}}, EnumValues: []string{"READER", "AUTHOR", "EDITOR", "ADMIN"}, EnumName: "UserRole"},
				{Name: "created_at", Column: "created_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: true, UpdateNow: false, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
				{Name: "updated_at", Column: "updated_at", GoType: "time.Time", Type: dsl.TypeTimestampTZ, Primary: false, Nullable: false, Unique: false, DefaultNow: false, UpdateNow: true, DefaultExpr: "", ReadOnly: false, ComputedSpec: nil, Annotations: nil, EnumValues: nil, EnumName: ""},
			},
			Edges: []runtime.EdgeSpec{
				{Name: "posts", Column: "posts", RefName: "author_id", Through: "", Target: "Post", Kind: dsl.EdgeToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
				{Name: "comments", Column: "comments", RefName: "author_id", Through: "", Target: "Comment", Kind: dsl.EdgeToMany, Nullable: false, Unique: false, Annotations: nil, Inverse: "", PolymorphicTargets: nil, Cascade: runtime.CascadeSpec{OnDelete: runtime.CascadeUnset, OnUpdate: runtime.CascadeUnset}},
			},
			Indexes: []runtime.IndexSpec{
				{Name: "users_username_unique", Columns: []string{"username"}, Unique: true, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "users_email_unique", Columns: []string{"email"}, Unique: true, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "users_slug_unique", Columns: []string{"slug"}, Unique: true, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
				{Name: "users_role_created_at", Columns: []string{"role", "created_at"}, Unique: false, Where: "", Method: "", NullsNotDistinct: false, Annotations: nil},
			},
		},
	},
}
